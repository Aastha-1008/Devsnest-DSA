int isoperand(char c){
    if(c=='+' || c=='-' || c=='*' || c=='/' || c=='^' || c=='(' || c==')') 
        return 0;
    else return 1;
}
int precedence(char c){
    if(c=='+'||c=='-')return 1;
    else if(c=='*'||c=='/')return 2;
    else if(c=='^')return 3;
    return -1;
}

string solve(string infix){
//CODE HERE 
    string res;
    stack<char>stack;
    for(int i = 0 ; i<infix.size() ; i++){
        if(isoperand(infix[i]))
            res += infix[i];
        else if(infix[i]=='('){
            stack.push('(');
        }
        else if(infix[i]==')'){
            while(stack.top()!='('){
                res += stack.top();
                stack.pop();
            }
            stack.pop();
        }
        else{
            while(!stack.empty() && precedence(infix[i])<= precedence(stack.top())) {
                res+=stack.top();
                stack.pop();
            }
            stack.push(infix[i]);
        }
    }
    while(!stack.empty()){
        res += stack.top();
        stack.pop();
    }
    return res;
}
